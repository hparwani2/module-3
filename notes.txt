// binary - two posibilities


arr = 2 7 9 12 25 30 38 100

O(logn), O(1)

Global Linear Search

arr = 2 7 6 9 12 25 30 38 25 100
element = 25

ans = 5



arr = 2 5 5 7 8 8 8 8 10 11
target = 8

2 

if(justleft of elment === elment && justright of element == same) {
    left
    right
    return [left, right];
} else if(justleft of elment !== elment) {
    indexOfElement;

    right
} else if (justRight of elment !== elment) {
    indexOfElement;
    left
}

low = 0, high = 10, mid = 5
























arr = 2 3 5 5 7 9
target = 5
ans = 'YES'
tsaget = 7
ans = 'NO'

if(arr[mid] === element 
    && 
(arr[mid-1] === element || arr[mid+1] === element)) {
    return 'YES';
} else if(arr[mid] === element 
    && 
(arr[mid-1] !== element && arr[mid+1] !== element)) {
    return 'NO'
}
else if(arr[mid] < element) {
    left
} else {
    right
}


arr = 1 3 6 8 9 15
target = 9
















1 2 5 7 13 15 16 18 24 28 29

target = 28

low=0, high=10, mid1=3, mid2=7

count sort
arr = 

















------------------------------------------------------

arr = [29, 34, 19, 39, 21, 41]
buckets = 10

0 
1 ---> 1.9
2 ---> 2.1, 2.9
3 ---> 3.4, 3.9
4 ---> 4.1
5
6
7
8
9

1.9, 2.1, 2.9, 3.4, 3.9, 4.1

----------------------------------------------------

arr = [29, 34, 19, 39, 21, 41]

min = 19
max = 41
41/10 - 19/10 + 1 = 23
4 - 1 + 1 = 4

FloorMin = 1

0 ---> 1.9
1 ---> 2.9, 2.1
2 ---> 3.4
3 ---< 4.1


0
1
2
3
4
5
6
7
8
9
10 ----> 29
11
12
13
14
15 ----> 34
16
17
18
19
20
21
22

--------------------------------------------------------
s = unacademy
sorted = aacdemnuy

countSort

--------------------------------------------------------

arr = [29, 34, 19, -7, 39, 21, 41, -2];
min = -7
max = 41

arrSize = 41-(-7) + 1 = 49
29-(-7) = 36

-----------------------------------------------------------

reverse a linked list


 null <---- 1 <----- 2 <------ 3 <----- 4


next = current.next;    null
current.next = previous;  null <--- 1
previous = current; 4
current = next; null





head = previous;

------------------------------------------------

radix sort

arr = [9, 5, 904, 402, 44, 89];

009
005
904
402
044
089

402
904
044
005
009
089

402
904
005
009
044
089

005
009
044
089
402
904



--------------------------------------------------------

5   6   4   7   8   2   9
6   7   7   8   9   9   -1

next greater element


----------------------------------------------------------

str = aabbaca;
output = aca;

def nextGreaterElement(self, nums1: List[int], nums2: List[int]) -> List[int]:
        stack = []
        temp = []
        ans = []
        for i in range(len(nums2)-1,-1,-1):
            while len(stack)>0 and stack[-1]<=nums2[i]:
                stack.pop(-1)
            if len(stack)>0:
                temp = [stack[-1]] + temp
            else:
                temp = [-1] + temp
            stack.append(nums2[i])
        for i in nums1:
            ans.append(temp[nums2.index(i)])
        return ans


----------------------------------------------------

arr = 11, 81, 94, 43, 3

left = 0  0  0  2  4
right = 3 1  0  0  0

output = 


6 3 1 2 4

left = 2
right = 2
left * right + left + right + 1




3 1 2 4
[3] [1] [2] [4] [3,1] [3,1,2] [3,1,2,4] [1,2] [1,2,4] [2,4]

3 + 1 + 2 + 4 + 1 + 1 + 1 + 1 + 1 + 2 = 17


output: 17






------------------

3 1 2 4
1 2 1 1
1 3 2 1



1, 1

1 = 1
1 = 1
1, 1 = 0

output = 2


---------------------------

3 1 2 4 1
1 2 1 1 3
1 4 2 1 1

-----------------------

100 80 60 70 60 75 85
1   1  1  2  1  4  6








----------------------------

str = ababcbbda
ans = c

queue: 
obj: {

}


-----------------------------

implement stack using queue.








FILO
LIFO



FIFO
LILO

-----------------------------



Given a sorted LL, we need to remove duplicates

list = 1 2 3 4c

result = 1 2 3 4


while(current.next !== null) {

    if(current.data === current.next.data) {
        current.next = current.next.next;
    } else {
        current = current.next;
    }

}







--------------------------

two sorted LL, merge

l1 = 
l2 = 5

result = 1 --> 2 ---> 3 ---> 4 ---> 5



while(l1 !== null && l2 !== null) {

    if(l1.data <= l2.data) {
        result.addNodeAtLast(l1.data);
    } else {
        result.addNodeAtLast(l2.data);
    }
}

while(l1 !== null) {
    result.addNodeAtLast(l1.data);
}

while(l2 !== null) {
    result.addNodeAtLast(l2.data);
}

result = 1 2 3 4 5




------------------------------------------



Given a linked list and a value k, perform 
a right rotation such that the 
kth node reaches the end of the linked list..


Input :
1,2,3,4,5,6

4 5 6 1 2 3 4
k=3


Output:
4,5,6,1,2,3




---------------------------------------------


Given one linked list, you are supposed 
to swap the element at nth position from both 
left and right.


Input:
list = 1,2,3,4,5
k = 2

Output
1,4,3,2,5



----------------------------------------------

You are given two linked list l1 and l2 of size m,n. 
Your job is to merge both the linked list in a way that
there nodes are arranged in an alternate position. 
The first LL will contain the resultant list, while the
second has to become empty if all its elements are used else will 
contain the left out elements.

Note:
Perform an inplace insertion, keepint the time complexity as O(n)

Input:
l1 = 1,3,5,7, 8, 9
l2 = 2,4,6

l1 = 1l1 -> 2l2 -> 3l1 -> 4l2 -> 5l1 -> 6l2 -> 7l1
l2 = 8, 9
Output:
1,2,3,4,5,6,7


--------------------------------------------

1. Reverse the nodes of a given linked list
2. Given a linked list, move its last element to the front position







---------------------------------------------------

Asteroids Collision.

ASTEROIDS = [-10,11,21,-30, -20]
+ ---> rightDirection
- ----> leftDirection

<---- -10 <---- -20
cases




-30
-10





----------------------------------------------


Given a string S made up of characters `a` and `b`. 
You need to count the minimum deletion needed to make the string balanced.
A string is said to be balanced only if there doesnt exists a pair 
(i,j) where i<j and s[i]=’b’ and s[j]=’a’


ba ---> not balanced --- 1
aaba ---> not balanced --- 1
aaaa ----> balanced --- 0
bbb ---> balanced  --- 0
baaa ---> not balanced --- 1
aabaaba ---> not balanced --- 2

Example Input-1
aababbab --->


b
b
b
b

count = 2
Output:
2



----------------------------------------

Given a string S of numbers and an integer N, you need to find the minimum possible 
integer that can be formed after removing N digits from the string S

Example Input-1:
S = 10200, N=2

output = 200

Example Input-2:
S = 121198, N=3








2

10200


-------------------------------------------------

Calculate Postfix notation.

Input-1:

124*+
Output:
9

Explanation:
2*4 = 8
1+8 = 9
Input-2:
6784/+-
Output:





6784/+-




-3


-----------------------------------------

n = 5

111 110 101 100



--------------------------



4. Which datastructure can be used for an implicit implementation of recursion?
a) Stack
b) Queue
c) Linked List
d) Array






(())()




(
(

-----------------------

Problem Statement - 
Given a queue and number K. 
Your task is to reverse it till K elements and then
keep the remaining elements as it is.

For example –
Input – [5,4,3,2,1,6,7,8,9,10], k = 5
Output – [5,4,3,2,1,6,7,8,9,10]

5
4
3
2
1

-----------------------------------------


Problem Statement - Given a circle where many petrol pumps are installed.
Also, the amount of petrol at each petrol pump and the distance between
them is given. Your task is to find the first point in the circle where a truck can
complete its first circle.
Assume that truck can cover 1 unit of distance with 1 liter of petrol

Input - (4,6), (6,5), (7,3), (4,5)
Above example shows that there are 4 petrol pumps in a circle, where the
first number indicates the amount of petrol and the second number indicates
distance from the next petrol pump.

Output - (6,5)




--------------------------------------------------------------------------

        1
    2       3
4       5 6     7


-------------------------------------------

[1,2,3,4,5,6,7]

0 ---> 1, 2
1 ---> 3, 4
2 ---> 5, 6
3 ---> 7, 8

<= (n - 3) / 2 = 3*2+2


------------------------------------------------

        1
    2       3
4       5 6     7

pre-order

print
left
right




in-order

left
print
right

4  2  5  1  6  3  7

         1
    2         3   
4      5    6    7      

post-order

left
right
print

4  5  2  6  7  3  1

-------------------------------------------------

       1
    2       3
4       5 6     7


[1, 2, 3, 4, 5, 6, 7]


0 ---> 1, 2   -> i*2+1 - l, i*2+2 - r
1 ---> 3, 4
2 ----> 5, 6


(n-1) = i * 2 + 2
(n-3)/2 = i

-------------------------------------------------

level-order traversal

       1
    2       3
4       5 6     7


---> [1] --->

1, 
2, 3, 
4, 5, 6, 7

-----------------------------------------------


input = 890, 325, 290, 530, 965
        890
    325      965
290    530


290 530 965



-------------------------------------------------



pre-order = 3,9,20,15,7
in-order = 9,3,15,20,7

            





965
--------------------------------------

Given an input string, 
find out the maximum occurring character 
in the string and print it.

Example 1:
Input: string = “abbfed”
Output: b

Example 2:
Input: string = “wefeqweeq”
Output: e


------------------------------------------


Given an array of strings, 
group the anagrams together and return them.

What is an anagram?
Two strings are known as an anagram of 
each other if they contain the same
characters. One string is just a different 
rearrangement of the other.


Example 1:
Input: strs = ["eat","tea","tan","ate","nat","bat"]
Output: [["bat"],["nat","tan"],["ate","eat","tea"]]
Example 3:
Input: strs = ["a"]
Output: [["a"]]


-------------------------------------------------------


Given an unsorted array of integers, 
find out the length of the consecutive 
subsequence of the
array.

Example 1:
Input: nums = [10,4,20,1,3,2]
Output: [1, 2, 3, 4]

[1,1,1,1,,,,,,1,,,,,,,,,,1,,]

1, 2, 3, 4

Example 2:
Input: nums = [0,3,7,2,5,8,4,6,0,1]
Output: [0, 1, 2, 3, 4, 5, 6, 7, 8]


-----------------------------------------------


str = a  b   c   d   b   a   f   e   g

start = 1
end = 8
max = end - start = 7


a, 5
b, 4
c, 2
d, 3
f, 6
e, 7
g, 8
---------------------------------


a      b      c     a     b    c     d    b     b

4


------------------------------------------------


Given an array S of n integers, are there elements a, b, c, and d in S such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.

Note:

Elements in a quadruplet (a,b,c,d) must be in non-descending order. (ie, a ≤ b ≤ c ≤ d)
The solution set must not contain duplicate quadruplets.
Example : 

Given array S = {1 0 -1 0 -2 2}, and target = 0

A solution set is:

    (-2, -1, 1, 2)
    (-2,  0, 0, 2)
    (-1,  0, 0, 1)
Also make sure that the solution set is lexicographically sorted.

Solution[i] < Solution[j] iff Solution[i][0] < Solution[j][0] OR (Solution[i][0] == Solution[j][0] AND ... Solution[i][k] < Solution[j][k])


------------------------------

[1, 2, 2, 2, 3, 3, 3, 3, 4];

[3,3,3,3,2,2,2,1,4]

[   
    [3, 4],
    [2, 3],
    [1, 1],
    [4, 1]
]



arr.sort((a, b) => {
    return a[1] > b[1];
})


----------------------------------

Rearrange characters in a String 
such that no two adjacent characters are same

input: aa


----------------------------------

pile1 = H H H T H
pile2 = H H H T H


-----------------------------------


A stack permutation is a permutation of objects in the given input queue 
which is done by transferring elements from the input queue to the output 
queue with the help of a stack and the built-in push and pop functions.

The rules are: 

1. Only dequeue from the input queue.
2. Use inbuilt push, and pop functions in the single stack.
3. Stack and input queue must be empty at the end.
4. Only enqueue to the output queue.
There are a huge number of permutations possible using a stack for a single input queue. 
Given two arrays, both of unique elements. 
One represents the input queue and the other represents the output queue. 
Our task is to check if the given output is possible through stack permutation.

----------------------------------------

EMDRAS



infix

operator in between
((( a + b ) - c * ( d / e )) + f)

prefix
operator would be first
+-+ab*c/def

Postfix
operator would be last

ab+cde/*-f+
























---------------------

precedence

^
3

/,*
2

+,-
1


infix

((( a + b ) - c * ( d / e )) + f)


result = ab+cde/*-f+

stack


--------------------------------------


Input: sum = 10, coins[] = {2, 5, 3, 6}

{2,2,2,2,2}
{5,5}
{2,2,3,3}
{2,2,6}
{2,3,5}

5















--------------------------------------------

Problem 2: Find the unique number
Find element that occurs once in the 
array where rest of the element appear twice

arr = [2, 1, 2, 5, 6, 1, 6, 6, 2, 1]
output = 5

-- xor operator

a^a = 0
0^b = b

same bit will result 0, and 
different bits will result 1

O(n*32)

000000000000000000000...32

array of size 32

010 - 2
001 - 1
010 - 2
101 - 5
110 - 6
001 - 1
001 - 1
010 - 2
110 - 6
110 - 6
---
101
---

0 - 4
000 000

1 - 6
111 1



101
000
---
101
---


----------------------------------------

Problem Statement – Given an array of n numbers and a number k. 
Your task is to select k numbers from an array such
that the absolute difference between selected k numbers and remaining 
numbers is maximum.

Print the maximum absolute difference as output.
Input: [18, 4, 15, 10], k=2;
output - 19

18,4 - 22            25   =  3
18,15 - 33           14   = 19
18,10 - 28           19   = 9
4,10 - 14            33   = 19
4,15 - 19            28   = 9
15,10 - 25           22   = 3



Output - 


--------


Input: [18, 4, 15, 12, 10], k=2;
4, 10, 12, 15, 18, k=2







45-14  = 31



--------------------------------------------

Problem Statement – Given an array of n numbers . 
Each element in the array is at most k distance from its actual
position. Your task is to sort this kind of array with minimum time,
where n = number of elements and k = distance from its
actual position

Input: arr[] = {6, 5, 3, 2, 8, 10, 9}, K = 3

Insertion sort - O(n*k)
Heap -   
               
        5
    8       6
10


O((n-k)*log2k)
2, 3, 5


quickSort - homework


--------------------------------------------------------

Problem Statement – Given a sorted array of n numbers. 
Your task is to apply an equation on each element and after
applying, you need to sort it again.

Equation is A*x*x + B*x + C
Input: [ 1, 2, 3, 5, 6, 7 ], A = -1, B = -2, C = 3
[0, -5, -12, -32, -45, -60]


Output -> [ -60, -45, -32, -12, -5, 0]



---------------------------

Input : arr[] = {-1, 0, 1, 2, 3, 4} , A = -1, B = 2, C = -1
{-4, -1, 0, -1, -4, -9}

-------------------------------------------

Problem Statement - Given an array. 
Your task is to sort it using Stack.

For example –
Input – [2, 4, 1, 12, 14, 25, 35]

1
2
4
12
14
25      
35      


-------------------------------------------------------

Policeman decided to punish the Prisoner and asked him to 
make a statement. 

The Prisoner should make such a statement so that he would be alive.
If the statement is held true by Policeman, the Prisoner 
will be hanged to death and if the statement is held false, 
the Prisoner will be shot dead.


true ---- hanged
false ---- shot

ans "I willn't be hanged."
ans "I will be shot dead."

-----------------------------------------

str1 = ABCDGH
str2 = AEDFHR

ADH - 3

str1 = AGGTAB
str2 = GXTXAYB

AB - 2
TAB - 3
GTAB - 4

i = 0
j = 0

if(str[i] === str[j])
    return rec(i+1, j+1);

return Max(rec(i, j+1), rec(i+1, j));



 ------------------------------

 maximumSumSubarray
 arr = {-2, -3, 4, -1, -2, 1, 5, -3}
 max_till_now = 7
 current_sum = 4


{-9, -2, -1, -10}
 if all negative - -1 
 if all positive - sumOfArray
if all zeros - 0

-----------------------------

words = [dog, cat, ant, above, don, car]

queries